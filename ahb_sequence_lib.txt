class ahb_api extends uvm_sequence#(ahb_master_transaction);
  `uvm_object_utils(ahb_api)
  
   randc bit [HADDR_WIDTH-1:0]   haddr;
   rand bit  [HWDATA_WIDTH-1:0]  hwdata[];
   rand      write_type_e        hwrite;
   bit       [HRDATA_WIDTH-1:0]  hrdata;    
   bit                           hready;	 
             resp_type_e         hresp;  
   rand      burst_type_e        hburst;    
   rand      size_type_e         hsize;  	 
   rand bit  [HPROT_WIDTH-1:0]   hprot;  	 
   rand      trans_type_e        htrans; 	 
   rand bit 	                 hmastlock; 
   int                           addr_q[$];
   rand int                      count;
        int                      prev_count;
   rand      wr_rd_type_e        wr_rd;
  
  
   constraint haddr_c{haddr < SLAVE_MEM_SIZE;}
  
   constraint hwdata_c{
      hwdata.size() inside {[1:20]};
     (hburst == SINGLE) -> hwdata.size == 1; 
     (hburst == INCR)   -> hwdata.size == 4 ;
     (hburst == INCR4)  -> hwdata.size == 4;
     (hburst == INCR8)  -> hwdata.size == 8;
     (hburst == INCR16) -> hwdata.size == 16;
     (hburst == WRAP4)  -> hwdata.size == 4;
     (hburst == WRAP8)  -> hwdata.size == 8;
     (hburst == WRAP16) -> hwdata.size == 16;     
     foreach(hwdata[i]){
       hwdata[i] != 0;
     }
     solve hburst before hwdata;
   }
      
   function new(string name = "ahb_api");
     super.new(name);  
   endfunction
      
   virtual task body();
   endtask
    
  task ahb_write(bit [31:0]wr_addr,wr_data[],size_type_e wr_hsize,burst_type_e wr_hburst);
     `uvm_do_with(req,{ HADDR  == wr_addr;
                        HSIZE  == wr_hsize;
                        HWRITE == WRITE;
                        HWDATA.size() == wr_data.size();
                        req.HBURST == wr_hburst;
                        foreach(req.HWDATA[i]) 
                        {req.HWDATA[i]==wr_data[i]};
                        }
                   )
    endtask
  task ahb_read(bit [31:0]rd_addr,size_type_e rd_hsize,burst_type_e rd_hburst);
      `uvm_do_with(req,{ req.HADDR  == rd_addr;
                         req.HSIZE  == rd_hsize;
                         req.HWRITE == READ;
                         req.HBURST == rd_hburst;
                       }
                  )
    endtask : ahb_read
endclass : ahb_api

///////////////////////////// Features ////////////////////////////////////////

class ahb_write_read_seq extends ahb_api;
  `uvm_object_utils(ahb_write_read_seq)

  int                   haddr_q[$];
  
  //constraint c_burst {hsize == BYTE;hburst == SINGLE;}
  //constraint c_burst {hsize == HALFWORD;hburst == SINGLE;}
  constraint c_burst {hsize == WORD;hburst == SINGLE;}
  
  function new(string name = "ahb_write_read_seq");
    super.new(name);
  endfunction
  
  task body();
    prev_count = count;
    case(wr_rd)
      SINGLE_WRITE : begin
          ahb_write(haddr,hwdata,hsize,hburst);
          haddr_q.push_back(haddr);
          this.randomize();
      end
      SINGLE_READ : begin  
          ahb_read(haddr_q.pop_front,hsize,hburst);
      end
      SINGLE_WRITE_SINGLE_READ : begin
          ahb_write(haddr,hwdata,hsize,hburst); 
          haddr_q.push_back(haddr);
          this.randomize();
          ahb_read(haddr_q.pop_front,hsize,hburst); 
      end
      CONSECUTIVE_WRITE : begin
        for(int i=0; i < count; i++) begin
          ahb_write(haddr,hwdata,hsize,hburst); 
          haddr_q.push_back(haddr);
          this.randomize() with {count == prev_count;};
        end
      end
      CONSECUTIVE_READ : begin
        for(int i=0; i<count ; i++) begin
          ahb_read(haddr_q.pop_front,hsize,hburst); 
        end
      end
      CONSECUTIVE_WRITE_READ : begin
        for(int i=0; i<count; i++) begin
          ahb_write(haddr,hwdata,hsize,hburst); 
          haddr_q.push_back(haddr);
          this.randomize() with {count == prev_count;};
         end
        for(int i=0; i<count ; i++) begin
          ahb_read(haddr_q.pop_front,hsize,hburst); 
        end
      end
      SINGLE_WRITE_FOLLOWED_BY_CONSECUTIVE_READ : begin
        ahb_write(haddr,hwdata,hsize,hburst); 
        haddr_q.push_back(haddr);
        this.randomize() with {count == prev_count;};
        for(int i=0; i<count ; i++) begin
          ahb_read(haddr_q.pop_front,hsize,hburst); 
        end
      end
      SINGLE_READ_FOLLOWED_BY_CONSECUTIVE_WRITE : begin
        ahb_read(haddr_q.pop_front,hsize,hburst); 
        for(int i=0; i<count; i++) begin
          ahb_write(haddr,hwdata,hsize,hburst); 
          haddr_q.push_back(haddr);
          this.randomize() with {count == prev_count;};
         end
      end
      INCR_WRITE : begin
        for(int i=0; i< count; i++) begin
          ahb_write(haddr,hwdata,hsize,hburst); 
          haddr_q.push_back(haddr);
          this.randomize() with {count == prev_count;};
         end
      end
    endcase
  endtask : body
      
endclass : ahb_write_read_seq

//////////////////////////////////// incr ///////////////////////////////

class incr extends ahb_write_read_seq;
  `uvm_object_utils(incr)
  
  constraint c_burst {hburst == INCR;hsize == BYTE;}
  //constraint c_burst {hburst == INCR;hsize == HALFWORD;}
  //constraint c_burst {hburst == INCR;hsize == WORD;}
  
  function new(string name = "incr");
    super.new();
  endfunction : new
  
  task body();
    super.body();
  endtask : body
  
endclass : incr

//////////////////////////////////wrap ////////////////////////////////

class wrap extends ahb_write_read_seq;
  `uvm_object_utils(wrap)
  
  //constraint c_burst {hburst == WRAP4;hsize == BYTE;}
  constraint c_burst {hburst == WRAP4;hsize == HALFWORD;}
  //constraint c_burst {hburst == WRAP4;hsize == WORD;}
  
  function new(string name = "wrap");
    super.new();
  endfunction : new
  
  task body();
    super.body;
  endtask : body  
endclass : wrap